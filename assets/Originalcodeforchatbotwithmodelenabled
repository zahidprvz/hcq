import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:tflite_flutter/tflite_flutter.dart';

const String _intentsFile =
    "assets/intents.json"; // Replace with your intents file path
const String _modelFile =
    "assets/medical_chatbot_model.tflite"; // Replace with your model file path

class ChatBotScreen extends StatefulWidget {
  @override
  _ChatBotScreenState createState() => _ChatBotScreenState();
}

class ChatMessage {
  final String text;
  final bool isUser;

  ChatMessage({required this.text, required this.isUser});
}

class ChatBubble extends StatelessWidget {
  final ChatMessage message;

  const ChatBubble({required this.message});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(10),
      margin: EdgeInsets.only(
        top: 5,
        bottom: 5,
        left: message.isUser ? 40 : 10,
        right: message.isUser ? 10 : 40,
      ),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: message.isUser ? Colors.blue[300] : Colors.grey[300],
      ),
      child: Text(
        message.text,
        style: TextStyle(
          color: message.isUser ? Colors.white : Colors.black,
        ),
      ),
    );
  }
}

class _ChatBotScreenState extends State<ChatBotScreen> {
  final TextEditingController _messageController = TextEditingController();
  Interpreter? _interpreter;
  Map<String, List<String>> _responses = {};
  List<ChatMessage> _messages = [];
  bool _isLoading = false;
  List<String> _intents = [];

  @override
  void initState() {
    super.initState();
    _loadModel();
    _loadIntents();
  }

  void _loadModel() async {
    try {
      setState(() {
        _isLoading = true;
      });
      _interpreter = await Interpreter.fromAsset(_modelFile);
      print("Model loaded successfully.");
      setState(() {
        _isLoading = false;
      });
    } on Exception catch (e) {
      print("Error loading model: $e");
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _loadIntents() async {
    try {
      String data = await rootBundle.loadString(_intentsFile);
      Map<String, dynamic> jsonResult = json.decode(data);

      jsonResult["intents"].forEach((intent) {
        _responses[intent["tag"]] = List<String>.from(intent["responses"]);
        _intents.add(intent["tag"]);
      });

      print("Intents loaded: $_responses");
    } catch (e) {
      print("Error loading intents: $e");
    }
  }

  void _sendMessage(String message) async {
    if (_interpreter == null || _responses.isEmpty) return;

    setState(() {
      _isLoading = true;
    });

    try {
      List<double> input = preprocessMessage(message);
      print("Input preprocessed: $input");

      var output = List<double>.filled(
        _interpreter!.getOutputTensors()[0].shape[1],
        0,
      );
      print(
          "Output tensor shape: ${_interpreter!.getOutputTensors()[0].shape}");

      // Create a buffer for input and output tensors
      var inputBuffer = [input];
      var outputBuffer = [output];

      _interpreter!.run(inputBuffer, outputBuffer);
      print("Model run complete. Output: $outputBuffer");

      int predictedIntentIndex = getMaxIndex(outputBuffer[0]);
      print("Predicted intent index: $predictedIntentIndex");

      if (predictedIntentIndex >= 0 && predictedIntentIndex < _intents.length) {
        String predictedTag = _intents[predictedIntentIndex];
        String response = _responses[predictedTag]!.first;
        print("Response: $response");

        setState(() {
          _messages.add(ChatMessage(text: message, isUser: true));
          _messages.add(ChatMessage(text: response, isUser: false));
        });
      } else {
        print("Predicted intent index out of range: $predictedIntentIndex");
      }
    } catch (e) {
      print("Error processing message: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  int getMaxIndex(List<double> list) {
    if (list.isEmpty) return -1;

    double maxValue = list.reduce(max);
    return list.indexOf(maxValue);
  }

  List<double> preprocessMessage(String message) {
    List<String> words = message.split(' ');
    words = words
        .map((word) => word.toLowerCase().replaceAll(RegExp(r'[^\w\s]'), ''))
        .toList();
    List<double> encoded =
        words.map((word) => word.codeUnits.first.toDouble()).toList();

    // Ensure input is padded or trimmed to match expected input size (e.g., 10 for demonstration)
    int expectedInputSize = _interpreter!.getInputTensors()[0].shape[1];
    if (encoded.length < expectedInputSize) {
      encoded += List<double>.filled(expectedInputSize - encoded.length, 0);
    } else if (encoded.length > expectedInputSize) {
      encoded = encoded.sublist(0, expectedInputSize);
    }

    return encoded;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ChatBot'),
      ),
      body: Column(
        children: <Widget>[
          Expanded(
            child: ListView.builder(
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return ChatBubble(message: _messages[index]);
              },
            ),
          ),
          const Divider(height: 1),
          Container(
            decoration: BoxDecoration(color: Theme.of(context).cardColor),
            child: _buildMessageComposer(),
          ),
        ],
      ),
    );
  }

  Widget _buildMessageComposer() {
    return IconTheme(
      data: IconThemeData(color: Theme.of(context).colorScheme.secondary),
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 8.0),
        child: Row(
          children: <Widget>[
            Flexible(
              child: TextField(
                controller: _messageController,
                onSubmitted: _handleSubmit,
                decoration: const InputDecoration.collapsed(
                  hintText: "Send a message",
                ),
              ),
            ),
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 4.0),
              child: IconButton(
                icon: const Icon(Icons.send),
                onPressed: () => _handleSubmit(_messageController.text),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _handleSubmit(String text) {
    if (text.isEmpty) return;
    _sendMessage(text);
    _messageController.clear();
  }

  @override
  void dispose() {
    _messageController.dispose();
    if (_interpreter != null) {
      _interpreter!.close();
    }
    super.dispose();
  }
}
